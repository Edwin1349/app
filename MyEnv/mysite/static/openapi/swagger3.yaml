swagger: '2.0'
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: 'localhost:8000'
basePath: /
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
schemes:
  - https
  - http
paths:
  /swagger/c:
    post:
      tags:
        - family
      summary: Create family
      description: This can only be done by the logged in family.
      operationId: createFamily
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created family object
          required: true
          schema:
            $ref: '#/definitions/Family'
      responses:
        default:
          description: successful operation
  /swagger/d:
    delete:
      tags:
        - family
      summary: Create family
      description: This can only be done by the logged in family.
      operationId: deleteFamily
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created family object
          required: true
          schema:
            $ref: '#/definitions/Family'
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Family:
    type: object
    properties:
      id:
        type: integer
        format: int64
      fname:
        type: string
      password:
        type: string
      count:
        type: integer
        format: int64
      budget:
        type: integer
        format: int64
      Users:
        type: array
        minItems: 3
        uniqueItems: true
        items:
          $ref: '#/definitions/User'
    xml:
      name: Family
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      birth data:
        type: string
      spending:
        type: integer
        format: int64
      family_id:
        type: integer
        format: int64
    xml:
      name: User